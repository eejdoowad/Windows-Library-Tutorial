Installing Developer Libraries on Windows. For beginners. How and Why.

***Disclaimer: I'm no expert, just a soul whose intentions are good. If you see something wrong, please inform me and I'll correct it.

***Notes: Have a 'i dont care just show me how to install this shit button'. An intro to compilers, linkers, and loaders, and standard libraries.

** make (and use) your own library example

** environment variables and path

***MinGW vs Cygwin vs Visual C++ vs Clang

** Visual C++ compilers and versions, C++ ABIs

** 32bit vs 64bit, Debug vs Release

** SDK vs library vs framework vs executable

** Visual studio solutions vs projects, example multi-project solution

** header file extensions: .hh, .hpp, .h

** Compilers -> Assembly -> Assemblers -> Object Code -> Linker -> executable or library

** Make a mention of Visual C++ redistributable package installers you see with videogames. "The Visual C++ compiler ABI have historically changed between major compiler releases.[38] This is especially the case for STL containers, where container sizes have varied a lot between compiler releases." [http://en.wikipedia.org/wiki/Visual_C%2B%2B]

** Follow up: [http://en.wikipedia.org/wiki/Standard_library],[http://en.wikipedia.org/wiki/Programming_language_specification]

If you're like me, you've probably spent too much time setting up developer libraries and too little time actually using them. This tutorial will explain the hows and whys of installing and configuring develepor libraries on Windows, specifically for Visual Studio C++ projects. I'll show the steps involved to get three libraries I have used - SDL, SFML, OpenCV and Boost - up and running. You'll learn about environment variables, .lib and .dll files, headers, and what all those obscure instructions you blindly follow actually do. My hope is to integrate theory and practice so you'll learn something and save yourself time in the future.

Before discussing libraries and installation procedures, lets talk about your development toolchain. In this case, I'm using:
1. Windows (8.1 Ultimate 64bit in my case) - this is the operating system that everything runs on. Operating systems manage hardware and software resources and provide an environment on which user applications can run.
2. Visual Studio 2013 Community Edition - this is your IDE "Integrated Development Environment." IDEs are programs that provide tools needed to develope software. They usually include text editors, automated build tools, and debuggers. Visual Studio also includes compilers for various programs that turn the code you write into a representation your computer can process.
	a. Visual C++ compiler - A C++ compiler.
	b. 


So, what's a library? Let's ask Wikipedia [http://en.wikipedia.org/wiki/Library_%28computing%29]. If you're serious about software development, I highly recommend reading through the whole article.

"In computer science, a library is a collection of implementations of behavior, written in terms of a language, that has a well-defined interface by which the behavior is invoked. This means that as long as a higher level program uses a library to make system calls, it does not need to be re-written to implement those system calls over and over again. In addition, the behavior is provided for reuse by multiple independent programs. A program invokes the library-provided behavior via a mechanism of the language. For example, in a simple imperative language such as C, the behavior in a library is invoked by using C's normal function-call. What distinguishes the call as being to a library, versus being to another function in the same program, is the way that the code is organized in the system. Library code is organized in such a way that it can be used by multiple programs that have no connection to each other, while code that is part of a program is organized to only be used within that one program."

In short, a library is a collection of functions organized to be used by other programs. 




I'll start with SDL, which is "a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D." SDL is written in C but works natively with C++. So, we'll set it up in Visual Studio.




Static vs Dynamic Libraries.



Steps
1. Go to downloads page
2. Download appropriate package
~. If no appropriate package/only source code... compile it yourself
3. Unarchive (unzip)
~. Be sure to select Configuration (Debug/Release/Both)
4. Tell compiler where to find headers. "C/C++ >> General >> Additional Include Directories"
5. Tell linker where to find libraries. "Linker >> General >> Additional Library Directories"
5b. Specify specific .lib files to include "Linker >> input >> Additional Dependencies"
6. If dynamically linking make DLLs available (either place in .exe directory or add to path). Note may have to restart Visual Studio or Computer to detect changed env variables
~. For SDL You must define an entry point: "Linker >> System >> SubSystem"
7. Run a sample project. Usually one is provided.


** Quirks: SFML is a C++ library... have to link to appropriate compiler... something about ABI differences. SDL is C... any compiler can link to it.

** Figure out why SDL doesn't need different debug/release builds

SDL: Simple, easy C library. Nothing Special. Can statically or dynamically link SDL2.
SFML: Easy C++ library. Compilers must match. Specify debug/release builds.
OpenCV: Getting complicated, but process is about the same as SFML.
Boost: Collection of libraries. For everything. Some libraries are header only. Some aren't.